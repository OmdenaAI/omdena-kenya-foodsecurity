# -*- coding: utf-8 -*-
"""1_0_SB_Cropping raster data with shapefiles.ipynb

Automatically generated by Colaboratory.

Original notebook used file is located at
    https://colab.research.google.com/drive/1uL6KkvstpQ3VFoMEXiV5fjlmDdZ8e51K

# Using shapefiles to crop raster data

Contributors: Susanne Brockmann
"""

# Contributors: Margaux Masson-Forsythe

# !pip install rasterio && pip install rasterstats && pip install geojson && pip install geopandas && pip install geoplot

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import rasterio.mask
import geopandas as gpd
from rasterio.plot import show

"""## Setting up the data access"""
raster_data_folder = '/Users/margauxmforstyhe/Desktop/data/'
input_filename_reflectance = 'Senegal_reflectance_senegal_2014-01-01_2015-01-01_scale_250.tif'
input_filename_copernicus = 'senegal_copernicus_2014_scale_250.tif'
input_filename_temperature = 'Senegal_Temperature_senegal_2014-01-01_2015-01-01_scale_250.tif'
csv_yields_file_path = '/Users/margauxmforstyhe/Desktop/OmdenaGPSSD/GPSDD-Food-Security-Senegal/src/data/task4_generate_sw_build_gt/IPAR_yields_with_NDVI - Rice_CSC_2014.csv'


input_raster_file_reflectance = raster_data_folder + '/' + input_filename_reflectance
input_raster_file_copernicus = raster_data_folder + '/' + input_filename_copernicus
input_raster_file_temperature = raster_data_folder + '/' + input_filename_temperature

crop_yield = pd.read_csv(csv_yields_file_path)

output_path_hist_npy = raster_data_folder + "/histograms_augmented_Rice_CSC.npy"
output_path_yields_npy = raster_data_folder + "/yields_augmented_Rice_CSC.npy"

weeks = [19,30] # first week of June to last week of August
CROP_LABEL = 40
bin_seq_list_temp = [np.linspace(13000,16500,33), np.linspace(13000,15500,33)]
num_bands_temp = 2 # night and day
bin_seq_list_sat = [np.linspace(1, 2200, 33),
          np.linspace(900, 4999, 33),
          np.linspace(1, 1250, 33),
          np.linspace(150, 1875, 33),
          np.linspace(750, 4999, 33),
          np.linspace(300, 4999, 33),
          np.linspace(1, 4999, 33)]
num_bands_sat = 7 # 7 bands of reflectance

histograms_allbands_concat = []
yields = []

def get_sliding_windows_around_point(raster, px, py):
    # create a window for cropping the data or partially reading the data
    window0 = rasterio.windows.Window(px - WIDTH//2, py - HEIGHT//2, WIDTH, HEIGHT)
    # window1 = rasterio.windows.Window(px - WIDTH//2 + CENTER_DISTANCE, py - HEIGHT//2 + CENTER_DISTANCE, WIDTH, HEIGHT)
    window2 = rasterio.windows.Window(px - WIDTH//2 - CENTER_DISTANCE, py - HEIGHT//2 + CENTER_DISTANCE, WIDTH, HEIGHT)
    window3 = rasterio.windows.Window(px - WIDTH//2 - CENTER_DISTANCE, py - HEIGHT//2 - CENTER_DISTANCE, WIDTH, HEIGHT)
    # window4 = rasterio.windows.Window(px - WIDTH//2 + CENTER_DISTANCE, py - HEIGHT//2 - CENTER_DISTANCE, WIDTH, HEIGHT)
    windows = [window0, window2, window3]
    # windows = [window0, window1, window2, window3, window4]
    # clip is a nbands * N * N numpy array
    clips = []
    for window in windows:
        clip = raster.read(window=window)
        if clip.shape[1] == HEIGHT and clip.shape[2] == WIDTH:
            clips.append(clip)
    return clips

#### Function mask_image
# Removes non-crop pixels in all 2D slices of 3D image tensor of shape X x Y x (bands/time)
def mask_image(img, mask, num_bands):
    num_imgs = img.shape[0]//num_bands
    assert num_imgs == int(num_imgs)
    for t in range(num_imgs):
        for b in range(num_bands):
            img[t*num_bands + b, :, :] = np.multiply(img[t*num_bands + b, :, :], mask)
    return img

### Function calc_32_bins_histograms ####
# Generates 32-bins pixel counts histograms from GeoTiff
# The resulting histogram's size is [normalized bin values, number of timestamps, band]
# NB: number of timestamps N = N-day composite of GEE layers
# To be able to concanete histograms, all GeoTiff used need to have the same number of timestamps
# otherwise the sizes of the histrograms won't match
#
# Input:
# image: GeoTiff layer
# num_bands : number of bands combined in the image
# bin_seq_list: lindscape list to create the corresponding histograms
# weeks: time in weeks of the months before harvest. for 1 year: weeks = [0,46]
# for first week June to last week August: weeks = [19,30]
def calc_32_bins_histograms(image, num_bands, bin_seq_list, weeks=[0,46]):
    num_bins = 32
    num_times = image.shape[0] // num_bands
    hist = np.zeros([num_bins, num_times, num_bands])
    for i in range(image.shape[0]):
        band = i % num_bands
        density, _ = np.histogram(image[i,:, :], bin_seq_list[band], density=False)
        total = density.sum()  # normalize over only values in bins
        hist[:, i // num_bands, band] = density / float(total) if total > 0 else 0
    return hist[:, weeks[0]:weeks[1]]

# create a geopandas dataframe and set the crs
crop_yield_gpd = gpd.GeoDataFrame(crop_yield, geometry=gpd.points_from_xy(crop_yield.gpslon, crop_yield.gpslat))
crop_yield_gpd.crs ='EPSG:4326'

crop_yield_gpd = crop_yield_gpd.dropna()
crop_yield_gpd['lat_long_m'] = crop_yield_gpd['geometry'].to_crs('epsg:3395')
# set the shapefile column to geometry for easy access
# the geometry attribute determines which column contains the "spatial" data
raster_reflectance = rasterio.open(input_raster_file_reflectance)
raster_copernicus = rasterio.open(input_raster_file_copernicus)
raster_temperature = rasterio.open(input_raster_file_temperature)

ax = crop_yield_gpd.plot(facecolor='red', markersize=5)
show(raster_copernicus, ax=ax, with_bounds=True, transform=raster_copernicus.transform)
# show(raster_reflectance, ax=ax, with_bounds=True, transform=raster_reflectance.transform)

crop_yield_gpd.set_geometry('lat_long_m')

WIDTH = 85
HEIGHT = 83
CENTER_DISTANCE = 30
step = 1
for i in crop_yield_gpd.index:
    print("\n{}/{}".format(step,len(crop_yield_gpd)))
    lat = crop_yield_gpd.loc[i, 'gpslat']
    lon = crop_yield_gpd.loc[i, 'gpslon']
    print("Point {},{}, key: {}".format(lat, lon, crop_yield_gpd.KEY[i]))

    # Get pixel coordinates from map coordinates
    # for raster in rasters:
    py_reflectance, px_reflectance = raster_reflectance.index(lon, lat)
    py_copernicus, px_copernicus = raster_copernicus.index(lon, lat)
    py_temperature, px_temperature = raster_temperature.index(lon, lat)

    clips_reflectance = get_sliding_windows_around_point(raster_reflectance, px_reflectance, py_reflectance)
    clips_copernicus = get_sliding_windows_around_point(raster_copernicus, px_copernicus, py_copernicus)
    clips_temperature = get_sliding_windows_around_point(raster_temperature, px_temperature, py_temperature)
    if len(clips_temperature) == len(clips_copernicus) == len(clips_reflectance):
        # Mask clips with crop mask and generate 32 bins histograms
        for id_clip in range(len(clips_reflectance)):
            clips_copernicus[id_clip][clips_copernicus[id_clip] != CROP_LABEL] = 0
            clips_copernicus[id_clip][clips_copernicus[id_clip] == CROP_LABEL] = 1
            masked_clip_reflectance = mask_image(clips_reflectance[id_clip], clips_copernicus[id_clip], num_bands_sat)
            masked_clip_temperature = mask_image(clips_temperature[id_clip], clips_copernicus[id_clip], num_bands_temp)
            hist_sat = calc_32_bins_histograms(masked_clip_reflectance, num_bands_sat, bin_seq_list_sat, weeks)
            hist_temp = calc_32_bins_histograms(masked_clip_temperature, num_bands_temp, bin_seq_list_temp, weeks)
            hists_concat = np.concatenate((hist_sat, hist_temp), axis=2)

            # plt.subplot(1,2,1)
            # plt.imshow(masked_clip_reflectance[id_clip])
            # plt.subplot(1,2,2)
            # plt.imshow(hists_concat[:,:,0])
            # plt.show()

            histograms_allbands_concat.append(hists_concat)
            yields.append([float(crop_yield_gpd.Yield[i])])
        print("All augmented (CENTER_DISTANCE={}) histograms ({}) "
              "for point {} lat {} lon, yield {} "
              "were generated".format(CENTER_DISTANCE, len(clips_reflectance), lat, lon, crop_yield_gpd.Yield[i]))
    step = step + 1

print("{} histograms were generated".format(len(histograms_allbands_concat)))

print("Saving npy file for histograms: {}".format(output_path_hist_npy))
np.save(output_path_hist_npy, np.array(histograms_allbands_concat))
print("Saving npy file for yields: {}".format(output_path_yields_npy))
np.save(output_path_yields_npy, np.array(yields))

print("Done!")



